{
  "language": "Solidity",
  "sources": {
    "contracts/MultisendWithValid.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity 0.6.9;\npragma experimental ABIEncoderV2;\n\n// This is a file copied from https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/IERC20.sol\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    function decimals() external view returns (uint8);\n\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n}\n\n\n/**\n * @title Ownable\n * @author DODO Breeder\n *\n * @notice Ownership related functions\n */\ncontract InitializableOwnable {\n    address public _OWNER_;\n    address public _NEW_OWNER_;\n    bool internal _INITIALIZED_;\n\n    // ============ Events ============\n\n    event OwnershipTransferPrepared(address indexed previousOwner, address indexed newOwner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    // ============ Modifiers ============\n\n    modifier notInitialized() {\n        require(!_INITIALIZED_, \"DODO_INITIALIZED\");\n        _;\n    }\n\n    modifier onlyOwner() {\n        require(msg.sender == _OWNER_, \"NOT_OWNER\");\n        _;\n    }\n\n    // ============ Functions ============\n\n    function initOwner(address newOwner) public notInitialized {\n        _INITIALIZED_ = true;\n        _OWNER_ = newOwner;\n    }\n\n    function transferOwnership(address newOwner) public onlyOwner {\n        emit OwnershipTransferPrepared(_OWNER_, newOwner);\n        _NEW_OWNER_ = newOwner;\n    }\n\n    function claimOwnership() public {\n        require(msg.sender == _NEW_OWNER_, \"INVALID_CLAIM\");\n        emit OwnershipTransferred(_OWNER_, _NEW_OWNER_);\n        _OWNER_ = _NEW_OWNER_;\n        _NEW_OWNER_ = address(0);\n    }\n}\n\n/// @title MultiSend - Send multiple tokens to multiple addresses\n// WithValid\ncontract MultisendWithValid is InitializableOwnable {\n\n    address private constant _ETH_ADDRESS_ = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\n    mapping (address => bool) public AdminList;\n    \n    struct RefundList {\n        address token;\n        address target;\n        uint256 amount;\n        bool isRefund;\n    }\n\n    RefundList[] public refundList;\n\n    event Refund(address indexed token, address indexed to, uint256 amount, uint256);\n\n    // ============ Admin Operation Functions ============\n\n    function addAdminList(address admin) public onlyOwner {\n        AdminList[admin] = true;\n    }\n\n    function removeAdminList(address admin) public onlyOwner {\n        AdminList[admin] = false;\n    }\n\n    /// @notice used for emergency, generally there wouldn't be tokens left\n    function superWithdraw(address token) public onlyOwner {\n        if(token != _ETH_ADDRESS_) {\n            uint256 restAmount = IERC20(token).balanceOf(address(this));\n            (bool success, ) = token.call(abi.encodeWithSignature(\"transfer(address,uint256)\", _OWNER_, restAmount));\n            require(success, \"MultisendWithValid: TOKEN_TRANSFER_FAILED\");\n        } else {\n            uint256 restAmount = address(this).balance;\n            (bool success, ) = payable(_OWNER_).call{value: restAmount}(\"\");\n            require(success, \"MultisendWithValid: ETH_TRANSFER_FAILED\");\n        }\n    }\n\n    function setRefund(address[] memory token, address[] memory user, uint256[] memory amount) public {\n        require(AdminList[msg.sender], \"MultisendWithValid: NOT_ADMIN\");\n        require(token.length == user.length, \"MultisendWithValid: LENGTH_NOT_MATCH\");\n        require(user.length == amount.length, \"MultisendWithValid: LENGTH_NOT_MATCH\");\n        for(uint256 i = 0; i < user.length; i++) {\n            refundList.push(RefundList(token[i], user[i], amount[i], false));\n        }\n    }\n\n    function refund(uint256 startIndex) public onlyOwner returns (uint256 blockNumber, bytes[] memory returnData, bool[] memory dataValid) {\n        require(startIndex < refundList.length, \"MultisendWithValid: INVALID_INDEX\");\n        blockNumber = block.number;\n        returnData = new bytes[](refundList.length - startIndex);\n        dataValid = new bool[](refundList.length - startIndex);\n        for(uint256 i = startIndex; i < refundList.length; i++) {\n            require(!refundList[i].isRefund, \"MultisendWithValid: ALREADY_REFUNDED\");\n\n            (bool success, bytes memory ret) = refundList[i].token == _ETH_ADDRESS_ \n                ? payable(refundList[i].target).call{value: refundList[i].amount}(\"\") \n                : refundList[i].token.call(abi.encodeWithSignature(\"transfer(address,uint256)\", refundList[i].target, refundList[i].amount));\n\n            dataValid[i] = success;\n            returnData[i] = ret;\n            if (success) refundList[i].isRefund = true;\n\n            emit Refund(refundList[i].token, refundList[i].target, refundList[i].amount, i);\n        }\n    }\n\n    fallback() external payable {}\n    receive() external payable {}\n}"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "mode": "3"
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout"
        ],
        "": [
          "ast"
        ]
      }
    },
    "forceEVMLA": false,
    "detectMissingLibraries": false,
    "enableEraVMExtensions": false,
    "libraries": {}
  }
}